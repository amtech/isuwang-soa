 package com.isuwang.soa.monitor.api.domain.serializer;

 import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

 /**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class PlatformProcessDataSerializer implements BeanSerializer<com.isuwang.soa.monitor.api.domain.PlatformProcessData>{
        
      @Override
      public com.isuwang.soa.monitor.api.domain.PlatformProcessData read(TProtocol iprot) throws TException{

      com.isuwang.soa.monitor.api.domain.PlatformProcessData bean = new com.isuwang.soa.monitor.api.domain.PlatformProcessData();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setPeriod(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 2:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setAnalysisTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 3:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setServiceName(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 4:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setMethodName(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 5:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setVersionName(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 6:
              if(schemeField.type == TType.STRING){
              String elem0 = iprot.readString();
       bean.setServerIP(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 7:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setServerPort(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 8:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setPMinTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 9:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setPMaxTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 10:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setPAverageTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 11:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setPTotalTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 12:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setIMinTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 13:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setIMaxTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 14:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setIAverageTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 15:
              if(schemeField.type == TType.I64){
              long elem0 = iprot.readI64();
       bean.setITotalTime(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 16:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setTotalCalls(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 17:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setSucceedCalls(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 18:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setFailCalls(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 19:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setRequestFlow(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
              case 20:
              if(schemeField.type == TType.I32){
               int elem0 = iprot.readI32();
       bean.setResponseFlow(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(com.isuwang.soa.monitor.api.domain.PlatformProcessData bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("PlatformProcessData"));

      
            oprot.writeFieldBegin(new TField("period", TType.I32, (short) 1));
            Integer elem0 = bean.getPeriod();
            oprot.writeI32(elem0);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("analysisTime", TType.I64, (short) 2));
            Long elem1 = bean.getAnalysisTime();
            oprot.writeI64(elem1);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("serviceName", TType.STRING, (short) 3));
            String elem2 = bean.getServiceName();
            oprot.writeString(elem2);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("methodName", TType.STRING, (short) 4));
            String elem3 = bean.getMethodName();
            oprot.writeString(elem3);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("versionName", TType.STRING, (short) 5));
            String elem4 = bean.getVersionName();
            oprot.writeString(elem4);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("serverIP", TType.STRING, (short) 6));
            String elem5 = bean.getServerIP();
            oprot.writeString(elem5);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("serverPort", TType.I32, (short) 7));
            Integer elem6 = bean.getServerPort();
            oprot.writeI32(elem6);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("pMinTime", TType.I64, (short) 8));
            Long elem7 = bean.getPMinTime();
            oprot.writeI64(elem7);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("pMaxTime", TType.I64, (short) 9));
            Long elem8 = bean.getPMaxTime();
            oprot.writeI64(elem8);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("pAverageTime", TType.I64, (short) 10));
            Long elem9 = bean.getPAverageTime();
            oprot.writeI64(elem9);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("pTotalTime", TType.I64, (short) 11));
            Long elem10 = bean.getPTotalTime();
            oprot.writeI64(elem10);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("iMinTime", TType.I64, (short) 12));
            Long elem11 = bean.getIMinTime();
            oprot.writeI64(elem11);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("iMaxTime", TType.I64, (short) 13));
            Long elem12 = bean.getIMaxTime();
            oprot.writeI64(elem12);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("iAverageTime", TType.I64, (short) 14));
            Long elem13 = bean.getIAverageTime();
            oprot.writeI64(elem13);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("iTotalTime", TType.I64, (short) 15));
            Long elem14 = bean.getITotalTime();
            oprot.writeI64(elem14);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("totalCalls", TType.I32, (short) 16));
            Integer elem15 = bean.getTotalCalls();
            oprot.writeI32(elem15);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("succeedCalls", TType.I32, (short) 17));
            Integer elem16 = bean.getSucceedCalls();
            oprot.writeI32(elem16);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("failCalls", TType.I32, (short) 18));
            Integer elem17 = bean.getFailCalls();
            oprot.writeI32(elem17);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("requestFlow", TType.I32, (short) 19));
            Integer elem18 = bean.getRequestFlow();
            oprot.writeI32(elem18);
            
            oprot.writeFieldEnd();
          
            oprot.writeFieldBegin(new TField("responseFlow", TType.I32, (short) 20));
            Integer elem19 = bean.getResponseFlow();
            oprot.writeI32(elem19);
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(com.isuwang.soa.monitor.api.domain.PlatformProcessData bean) throws TException{
      
              if(bean.getServiceName() == null)
              throw new SoaException(SoaCode.NotNull, "serviceName字段不允许为空");
            
              if(bean.getMethodName() == null)
              throw new SoaException(SoaCode.NotNull, "methodName字段不允许为空");
            
              if(bean.getVersionName() == null)
              throw new SoaException(SoaCode.NotNull, "versionName字段不允许为空");
            
              if(bean.getServerIP() == null)
              throw new SoaException(SoaCode.NotNull, "serverIP字段不允许为空");
            
    }
    
        @Override
        public String toString(com.isuwang.soa.monitor.api.domain.PlatformProcessData bean)
        {return bean == null ? "null" : bean.toString();}
      }
      

      