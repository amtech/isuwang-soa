package com.isuwang.soa.monitor.api;

import com.isuwang.dapeng.core.*;
        import com.isuwang.org.apache.thrift.*;
        import com.isuwang.org.apache.thrift.protocol.*;

        import com.isuwang.dapeng.core.definition.SoaServiceDefinition;
        import com.isuwang.dapeng.core.definition.SoaFunctionDefinition;

        import java.io.BufferedReader;
        import java.io.InputStreamReader;

/**
        * Autogenerated by Dapeng-Code-Generator (1.2.2)
        *
        * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
        *  @generated
        **/
        public class MonitorServiceCodec {

        
            public static class uploadQPSStat_args {
            
                private java.util.List<com.isuwang.soa.monitor.api.domain.QPSStat> qpsStats;
                public java.util.List<com.isuwang.soa.monitor.api.domain.QPSStat> getQpsStats(){
                return this.qpsStats;
              }
                public void setQpsStats(java.util.List<com.isuwang.soa.monitor.api.domain.QPSStat> qpsStats){
                this.qpsStats = qpsStats;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("qpsStats").append("\":").append(qpsStats).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class uploadQPSStat_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class UploadQPSStat_argsSerializer implements BeanSerializer<uploadQPSStat_args>{
            
      @Override
      public uploadQPSStat_args read(TProtocol iprot) throws TException{

      uploadQPSStat_args bean = new uploadQPSStat_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.LIST){
               TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.monitor.api.domain.QPSStat> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.monitor.api.domain.QPSStat elem1 = new com.isuwang.soa.monitor.api.domain.QPSStat();
        elem1=new com.isuwang.soa.monitor.api.domain.serializer.QPSStatSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setQpsStats(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(uploadQPSStat_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("uploadQPSStat_args"));

      
            oprot.writeFieldBegin(new TField("qpsStats", TType.LIST, (short) 1));
            java.util.List<com.isuwang.soa.monitor.api.domain.QPSStat> elem0 = bean.getQpsStats();
            
          oprot.writeListBegin(new TList(TType.STRUCT, elem0.size()));
          for(com.isuwang.soa.monitor.api.domain.QPSStat elem1 : elem0){
           new com.isuwang.soa.monitor.api.domain.serializer.QPSStatSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(uploadQPSStat_args bean) throws TException{
      
              if(bean.getQpsStats() == null)
              throw new SoaException(SoaCode.NotNull, "qpsStats字段不允许为空");
            
    }
    

            @Override
            public String toString(uploadQPSStat_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UploadQPSStat_resultSerializer implements BeanSerializer<uploadQPSStat_result>{
            @Override
            public uploadQPSStat_result read(TProtocol iprot) throws TException{

              uploadQPSStat_result bean = new uploadQPSStat_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(uploadQPSStat_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("uploadQPSStat_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(uploadQPSStat_result bean) throws TException{
      
    }
    

            @Override
            public String toString(uploadQPSStat_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class uploadQPSStat<I extends com.isuwang.soa.monitor.api.service.MonitorService> extends SoaFunctionDefinition.Sync<I, uploadQPSStat_args, uploadQPSStat_result>
            {
              public uploadQPSStat()
              {
                super("uploadQPSStat", new UploadQPSStat_argsSerializer(),  new UploadQPSStat_resultSerializer());
              }

              @Override
              public uploadQPSStat_result apply(I iface, uploadQPSStat_args uploadQPSStat_args) throws SoaException
              {

                uploadQPSStat_result result = new uploadQPSStat_result();


                
                 iface.uploadQPSStat(uploadQPSStat_args.qpsStats);
                

                return result;

              }

            }
          
            public static class uploadPlatformProcessData_args {
            
                private java.util.List<com.isuwang.soa.monitor.api.domain.PlatformProcessData> platformProcessDatas;
                public java.util.List<com.isuwang.soa.monitor.api.domain.PlatformProcessData> getPlatformProcessDatas(){
                return this.platformProcessDatas;
              }
                public void setPlatformProcessDatas(java.util.List<com.isuwang.soa.monitor.api.domain.PlatformProcessData> platformProcessDatas){
                this.platformProcessDatas = platformProcessDatas;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("platformProcessDatas").append("\":").append(platformProcessDatas).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class uploadPlatformProcessData_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class UploadPlatformProcessData_argsSerializer implements BeanSerializer<uploadPlatformProcessData_args>{
            
      @Override
      public uploadPlatformProcessData_args read(TProtocol iprot) throws TException{

      uploadPlatformProcessData_args bean = new uploadPlatformProcessData_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.LIST){
               TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.monitor.api.domain.PlatformProcessData> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.monitor.api.domain.PlatformProcessData elem1 = new com.isuwang.soa.monitor.api.domain.PlatformProcessData();
        elem1=new com.isuwang.soa.monitor.api.domain.serializer.PlatformProcessDataSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setPlatformProcessDatas(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(uploadPlatformProcessData_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("uploadPlatformProcessData_args"));

      
            oprot.writeFieldBegin(new TField("platformProcessDatas", TType.LIST, (short) 1));
            java.util.List<com.isuwang.soa.monitor.api.domain.PlatformProcessData> elem0 = bean.getPlatformProcessDatas();
            
          oprot.writeListBegin(new TList(TType.STRUCT, elem0.size()));
          for(com.isuwang.soa.monitor.api.domain.PlatformProcessData elem1 : elem0){
           new com.isuwang.soa.monitor.api.domain.serializer.PlatformProcessDataSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(uploadPlatformProcessData_args bean) throws TException{
      
              if(bean.getPlatformProcessDatas() == null)
              throw new SoaException(SoaCode.NotNull, "platformProcessDatas字段不允许为空");
            
    }
    

            @Override
            public String toString(uploadPlatformProcessData_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UploadPlatformProcessData_resultSerializer implements BeanSerializer<uploadPlatformProcessData_result>{
            @Override
            public uploadPlatformProcessData_result read(TProtocol iprot) throws TException{

              uploadPlatformProcessData_result bean = new uploadPlatformProcessData_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(uploadPlatformProcessData_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("uploadPlatformProcessData_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(uploadPlatformProcessData_result bean) throws TException{
      
    }
    

            @Override
            public String toString(uploadPlatformProcessData_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class uploadPlatformProcessData<I extends com.isuwang.soa.monitor.api.service.MonitorService> extends SoaFunctionDefinition.Sync<I, uploadPlatformProcessData_args, uploadPlatformProcessData_result>
            {
              public uploadPlatformProcessData()
              {
                super("uploadPlatformProcessData", new UploadPlatformProcessData_argsSerializer(),  new UploadPlatformProcessData_resultSerializer());
              }

              @Override
              public uploadPlatformProcessData_result apply(I iface, uploadPlatformProcessData_args uploadPlatformProcessData_args) throws SoaException
              {

                uploadPlatformProcessData_result result = new uploadPlatformProcessData_result();


                
                 iface.uploadPlatformProcessData(uploadPlatformProcessData_args.platformProcessDatas);
                

                return result;

              }

            }
          
            public static class uploadDataSourceStat_args {
            
                private java.util.List<com.isuwang.soa.monitor.api.domain.DataSourceStat> dataSourceStat;
                public java.util.List<com.isuwang.soa.monitor.api.domain.DataSourceStat> getDataSourceStat(){
                return this.dataSourceStat;
              }
                public void setDataSourceStat(java.util.List<com.isuwang.soa.monitor.api.domain.DataSourceStat> dataSourceStat){
                this.dataSourceStat = dataSourceStat;
              }
              

            @Override
            public String toString(){
              StringBuilder stringBuilder = new StringBuilder("{");
                
      stringBuilder.append("\"").append("dataSourceStat").append("\":").append(dataSourceStat).append(",");
    
                if(stringBuilder.lastIndexOf(",") > 0)
                stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
                stringBuilder.append("}");

              return stringBuilder.toString();
            }

          }

            public static class uploadDataSourceStat_result {

            
                  @Override
                  public String toString(){
                  return "{}";
                }
                
          }

            public static class UploadDataSourceStat_argsSerializer implements BeanSerializer<uploadDataSourceStat_args>{
            
      @Override
      public uploadDataSourceStat_args read(TProtocol iprot) throws TException{

      uploadDataSourceStat_args bean = new uploadDataSourceStat_args();
      TField schemeField;
      iprot.readStructBegin();

      while(true){
        schemeField = iprot.readFieldBegin();
        if(schemeField.type == TType.STOP){ break;}

        switch(schemeField.id){
          
              case 1:
              if(schemeField.type == TType.LIST){
               TList _list0 = iprot.readListBegin();
        java.util.List<com.isuwang.soa.monitor.api.domain.DataSourceStat> elem0 = new java.util.ArrayList<>(_list0.size);
        for(int _i0 = 0; _i0 < _list0.size; ++ _i0){
          com.isuwang.soa.monitor.api.domain.DataSourceStat elem1 = new com.isuwang.soa.monitor.api.domain.DataSourceStat();
        elem1=new com.isuwang.soa.monitor.api.domain.serializer.DataSourceStatSerializer().read(iprot);
          elem0.add(elem1);
        }
        iprot.readListEnd();
       bean.setDataSourceStat(elem0);
            }else{
              TProtocolUtil.skip(iprot, schemeField.type);
            }
              break;
            
          
            default:
            TProtocolUtil.skip(iprot, schemeField.type);
          
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      validate(bean);
      return bean;
    }
    
      @Override
      public void write(uploadDataSourceStat_args bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("uploadDataSourceStat_args"));

      
            oprot.writeFieldBegin(new TField("dataSourceStat", TType.LIST, (short) 1));
            java.util.List<com.isuwang.soa.monitor.api.domain.DataSourceStat> elem0 = bean.getDataSourceStat();
            
          oprot.writeListBegin(new TList(TType.STRUCT, elem0.size()));
          for(com.isuwang.soa.monitor.api.domain.DataSourceStat elem1 : elem0){
           new com.isuwang.soa.monitor.api.domain.serializer.DataSourceStatSerializer().write(elem1, oprot);
        }
          oprot.writeListEnd();
        
            
            oprot.writeFieldEnd();
          
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
      public void validate(uploadDataSourceStat_args bean) throws TException{
      
              if(bean.getDataSourceStat() == null)
              throw new SoaException(SoaCode.NotNull, "dataSourceStat字段不允许为空");
            
    }
    

            @Override
            public String toString(uploadDataSourceStat_args bean) { return bean == null ? "null" : bean.toString(); }

          }

            public static class UploadDataSourceStat_resultSerializer implements BeanSerializer<uploadDataSourceStat_result>{
            @Override
            public uploadDataSourceStat_result read(TProtocol iprot) throws TException{

              uploadDataSourceStat_result bean = new uploadDataSourceStat_result();
              TField schemeField;
              iprot.readStructBegin();

              while(true){
                schemeField = iprot.readFieldBegin();
                if(schemeField.type == TType.STOP){ break;}

                switch(schemeField.id){
                  case 0:  //SUCCESS
                  if(schemeField.type == TType.VOID){
                    
      TProtocolUtil.skip(iprot, schemeField.type);
                  }else{
                    TProtocolUtil.skip(iprot, schemeField.type);
                  }
                  break;
                  /*
                  case 1: //ERROR
                  bean.setSoaException(new SoaException());
                  new SoaExceptionSerializer().read(bean.getSoaException(),iprot);
                  break A;
                  */
                  default:
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
              }
              iprot.readStructEnd();

              validate(bean);
              return bean;
            }
            
      @Override
      public void write(uploadDataSourceStat_result bean, TProtocol oprot) throws TException{

      validate(bean);
      oprot.writeStructBegin(new TStruct("uploadDataSourceStat_result"));

      
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
    
            
      public void validate(uploadDataSourceStat_result bean) throws TException{
      
    }
    

            @Override
            public String toString(uploadDataSourceStat_result bean) { return bean == null ? "null" : bean.toString(); }
          }

            public static class uploadDataSourceStat<I extends com.isuwang.soa.monitor.api.service.MonitorService> extends SoaFunctionDefinition.Sync<I, uploadDataSourceStat_args, uploadDataSourceStat_result>
            {
              public uploadDataSourceStat()
              {
                super("uploadDataSourceStat", new UploadDataSourceStat_argsSerializer(),  new UploadDataSourceStat_resultSerializer());
              }

              @Override
              public uploadDataSourceStat_result apply(I iface, uploadDataSourceStat_args uploadDataSourceStat_args) throws SoaException
              {

                uploadDataSourceStat_result result = new uploadDataSourceStat_result();


                
                 iface.uploadDataSourceStat(uploadDataSourceStat_args.dataSourceStat);
                

                return result;

              }

            }
          

        public static class getServiceMetadata_args {

          @Override
          public String toString() {
            return "{}";
          }
        }


        public static class getServiceMetadata_result {

          private String success;

          public String getSuccess() {
            return success;
          }

          public void setSuccess(String success) {
            this.success = success;
          }

          @Override
          public String toString() {
            StringBuilder stringBuilder = new StringBuilder("{");
              stringBuilder.append("\"").append("success").append("\":\"").append(this.success).append("\",");
              stringBuilder.deleteCharAt(stringBuilder.lastIndexOf(","));
              stringBuilder.append("}");

            return stringBuilder.toString();
          }
        }

        public static class GetServiceMetadata_argsSerializer implements BeanSerializer<getServiceMetadata_args> {

          @Override
          public getServiceMetadata_args read(TProtocol iprot) throws TException {

            getServiceMetadata_args bean =new getServiceMetadata_args();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }
              switch (schemeField.id) {
                default:
                TProtocolUtil.skip(iprot, schemeField.type);

              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }


          @Override
          public void write(getServiceMetadata_args bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("getServiceMetadata_args"));
            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_args bean) throws TException {}

          @Override
          public String toString(getServiceMetadata_args bean) {
            return bean == null ? "null" : bean.toString();
          }

        }

        public static class GetServiceMetadata_resultSerializer implements BeanSerializer<getServiceMetadata_result> {
          @Override
          public getServiceMetadata_result read(TProtocol iprot) throws TException {

            getServiceMetadata_result bean = new getServiceMetadata_result();
            TField schemeField;
            iprot.readStructBegin();

            while (true) {
              schemeField = iprot.readFieldBegin();
              if (schemeField.type == TType.STOP) {
                break;
              }

              switch (schemeField.id) {
                case 0:  //SUCCESS
                if (schemeField.type == TType.STRING) {
                  bean.setSuccess(iprot.readString());
                } else {
                  TProtocolUtil.skip(iprot, schemeField.type);
                }
                break;
                default:
                TProtocolUtil.skip(iprot, schemeField.type);
              }
              iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            validate(bean);
            return bean;
          }

          @Override
          public void write(getServiceMetadata_result bean, TProtocol oprot) throws TException {

            validate(bean);
            oprot.writeStructBegin(new TStruct("getServiceMetadata_result"));

            oprot.writeFieldBegin(new TField("success", TType.STRING, (short) 0));
            oprot.writeString(bean.getSuccess());
            oprot.writeFieldEnd();

            oprot.writeFieldStop();
            oprot.writeStructEnd();
          }

          public void validate(getServiceMetadata_result bean) throws TException {

            if (bean.getSuccess() == null)
            throw new SoaException(SoaCode.NotNull, "success字段不允许为空");
          }

          @Override
          public String toString(getServiceMetadata_result bean) {
            return bean == null ? "null" : bean.toString();
          }
        }

        public static class getServiceMetadata<I extends com.isuwang.soa.monitor.api.service.MonitorService> extends SoaFunctionDefinition.Sync<I, getServiceMetadata_args, getServiceMetadata_result> {
          public getServiceMetadata() {
            super("getServiceMetadata", new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
          }

          @Override
          public getServiceMetadata_result apply(I iface, getServiceMetadata_args args) {
            getServiceMetadata_result result = new getServiceMetadata_result();

            try (InputStreamReader isr = new InputStreamReader(MonitorServiceCodec.class.getClassLoader().getResourceAsStream("com.isuwang.soa.monitor.api.service.MonitorService.xml"));
            BufferedReader in = new BufferedReader(isr)) {
              int len = 0;
              StringBuilder str = new StringBuilder("");
              String line;
              while ((line = in.readLine()) != null) {

                if (len != 0) {
                  str.append("\r\n").append(line);
                } else {
                  str.append(line);
                }
                len++;
              }
              result.success = str.toString();

            } catch (Exception e) {
              e.printStackTrace();
              result.success = "";
            }

            return result;
          }

        }

        @SuppressWarnings("unchecked")
        public static class Processor<I extends com.isuwang.soa.monitor.api.service.MonitorService> extends SoaServiceDefinition<com.isuwang.soa.monitor.api.service.MonitorService>
        {

          public Processor(com.isuwang.soa.monitor.api.service.MonitorService iface, Class<com.isuwang.soa.monitor.api.service.MonitorService> ifaceClass)
          {
            super(iface, ifaceClass, buildMap(new java.util.HashMap<>()));
          }

          @SuppressWarnings("unchecked")
          private static <I extends com.isuwang.soa.monitor.api.service.MonitorService> java.util.Map<String, SoaFunctionDefinition<I, ?, ?>> buildMap(java.util.Map<String, SoaFunctionDefinition<I, ?, ?>> processMap)
          {
            
                processMap.put("uploadQPSStat", new uploadQPSStat());
              
                processMap.put("uploadPlatformProcessData", new uploadPlatformProcessData());
              
                processMap.put("uploadDataSourceStat", new uploadDataSourceStat());
              
            processMap.put("getServiceMetadata", new getServiceMetadata());
            return processMap;
          }
        }

      }
      