package com.isuwang.soa.price.domain.serializer;

import com.isuwang.soa.order.domain.serializer.*;
import com.isuwang.soa.price.domain.serializer.*;
import com.isuwang.soa.user.domain.serializer.*;
import com.isuwang.soa.settle.domain.serializer.*;

import com.isuwang.dapeng.core.*;
import com.isuwang.org.apache.thrift.*;
import com.isuwang.org.apache.thrift.protocol.*;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;

/**
 * Autogenerated by Dapeng-Code-Generator (1.2.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 **/
public class PriceSerializer implements BeanSerializer<com.isuwang.soa.price.domain.Price> {

    @Override
    public com.isuwang.soa.price.domain.Price read(TProtocol iprot) throws TException {

        com.isuwang.soa.price.domain.Price bean = new com.isuwang.soa.price.domain.Price();
        com.isuwang.org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();

        while (true) {
            schemeField = iprot.readFieldBegin();
            if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.STOP) {
                break;
            }

            switch (schemeField.id) {

                case 1:
                    if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.I32) {
                        int elem0 = iprot.readI32();
                        bean.setOrderId(elem0);
                    } else {
                        com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;

                case 2:
                    if (schemeField.type == com.isuwang.org.apache.thrift.protocol.TType.DOUBLE) {
                        double elem0 = iprot.readDouble();
                        bean.setPrice(elem0);
                    } else {
                        com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    break;


                default:
                    com.isuwang.org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);

            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        validate(bean);
        return bean;
    }

    @Override
    public void write(com.isuwang.soa.price.domain.Price bean, TProtocol oprot) throws TException {

        validate(bean);
        oprot.writeStructBegin(new com.isuwang.org.apache.thrift.protocol.TStruct("Price"));


        oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("orderId", com.isuwang.org.apache.thrift.protocol.TType.I32, (short) 1));
        Integer elem0 = bean.getOrderId();
        oprot.writeI32(elem0);

        oprot.writeFieldEnd();

        oprot.writeFieldBegin(new com.isuwang.org.apache.thrift.protocol.TField("price", com.isuwang.org.apache.thrift.protocol.TType.DOUBLE, (short) 2));
        Double elem1 = bean.getPrice();
        oprot.writeDouble(elem1);

        oprot.writeFieldEnd();

        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    public void validate(com.isuwang.soa.price.domain.Price bean) throws TException {

    }

    @Override
    public String toString(com.isuwang.soa.price.domain.Price bean) {
        return bean == null ? "null" : bean.toString();
    }
}
      

      