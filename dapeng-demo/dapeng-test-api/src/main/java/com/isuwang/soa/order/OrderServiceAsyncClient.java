package com.isuwang.soa.order;

import com.isuwang.dapeng.core.*;
import com.isuwang.org.apache.thrift.*;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Future;
import java.util.ServiceLoader;

import com.isuwang.soa.order.OrderServiceAsyncCodec.*;
import com.isuwang.soa.order.service.OrderServiceAsync;

/**
 * Autogenerated by Dapeng-Code-Generator (1.2.2)
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *
 * @generated
 **/
public class OrderServiceAsyncClient implements OrderServiceAsync {
    private final String serviceName;
    private final String version;

    private SoaConnectionPool pool;

    public OrderServiceAsyncClient() {
        this.serviceName = "com.isuwang.soa.order.service.OrderService";
        this.version = "1.0.0";

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class);
        for (SoaConnectionPoolFactory factory : factories) {
            this.pool = factory.getPool();
            break;
        }
        this.pool.registerClientInfo(serviceName, version);
    }


    /**
     *
     **/

    public CompletableFuture<Void> createOrder(com.isuwang.soa.order.domain.Order order, long timeout) throws SoaException {

        String methodName = "createOrder";
        createOrder_args createOrder_args = new createOrder_args();
        createOrder_args.setOrder(order);


        CompletableFuture<createOrder_result> response = (CompletableFuture<createOrder_result>) pool.sendAsync(serviceName, version, "createOrder", createOrder_args, new CreateOrder_argsSerializer(), new CreateOrder_resultSerializer(), timeout);


        return response.thenApply((createOrder_result result) -> null);

    }


    /**
     *
     **/

    public CompletableFuture<com.isuwang.soa.order.domain.Order> getOrderById(Integer orderId, long timeout) throws SoaException {

        String methodName = "getOrderById";
        getOrderById_args getOrderById_args = new getOrderById_args();
        getOrderById_args.setOrderId(orderId);


        CompletableFuture<getOrderById_result> response = (CompletableFuture<getOrderById_result>) pool.sendAsync(serviceName, version, "getOrderById", getOrderById_args, new GetOrderById_argsSerializer(), new GetOrderById_resultSerializer(), timeout);


        return response.thenApply((getOrderById_result result) -> result.getSuccess());


    }


    /**
     * getServiceMetadata
     **/
    public String getServiceMetadata() throws SoaException {
        String methodName = "getServiceMetadata";
        getServiceMetadata_args getServiceMetadata_args = new getServiceMetadata_args();
        getServiceMetadata_result response = pool.send(serviceName, version, methodName, getServiceMetadata_args, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
        return response.getSuccess();
    }

}
    