package com.isuwang.soa.order.scala

import com.isuwang.dapeng.core._;
import com.isuwang.org.apache.thrift._;
import java.util.ServiceLoader;
import com.isuwang.soa.order.scala.OrderServiceCodec._;
import com.isuwang.soa.order.scala.service.OrderService;

/**
  * Autogenerated by Dapeng-Code-Generator (1.2.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *
  * @generated
  *
  **/
class OrderServiceClient extends OrderService {

  import java.util.function.{Function ⇒ JFunction, Predicate ⇒ JPredicate, BiPredicate}

  implicit def toJavaFunction[A, B](f: Function1[A, B]) = new JFunction[A, B] {
    override def apply(a: A): B = f(a)
  }

  val serviceName = "com.isuwang.soa.order.service.OrderService"
  val version = "1.0.0"
  val pool = {
    val serviceLoader = ServiceLoader.load(classOf[SoaConnectionPoolFactory])
    if (serviceLoader.iterator().hasNext) {
      val poolImpl = serviceLoader.iterator().next().getPool
      poolImpl.registerClientInfo(serviceName, version)
      poolImpl
    } else null
  }

  def getServiceMetadata: String = {
    pool.send(
      serviceName,
      version,
      "getServiceMetadata",
      new getServiceMetadata_args,
      new GetServiceMetadata_argsSerializer,
      new GetServiceMetadata_resultSerializer
    ).success
  }


  /**
    *
    **/
  def createOrder(order: com.isuwang.soa.order.scala.domain.Order): Unit = {

    val response = pool.send(
      serviceName,
      version,
      "createOrder",
      createOrder_args(order),
      new CreateOrder_argsSerializer(),
      new CreateOrder_resultSerializer())


  }

  /**
    *
    **/
  def getOrderById(orderId: Int): com.isuwang.soa.order.scala.domain.Order = {

    val response = pool.send(
      serviceName,
      version,
      "getOrderById",
      getOrderById_args(orderId),
      new GetOrderById_argsSerializer(),
      new GetOrderById_resultSerializer())

    response.success

  }

}
      