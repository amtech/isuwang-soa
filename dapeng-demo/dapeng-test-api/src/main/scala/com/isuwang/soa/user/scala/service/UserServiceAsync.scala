
package com.isuwang.soa.user.scala.service

import com.isuwang.dapeng.core.{Processor, Service}
import com.isuwang.dapeng.core.SoaGlobalTransactional
import scala.concurrent.Future

/**
  * Autogenerated by Dapeng-Code-Generator (1.2.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *
  * @generated
  *
  *
  **/
@Service(name = "com.isuwang.soa.user.service.UserService", version = "1.0.0")
@Processor(className = "com.isuwang.soa.user.scala.UserServiceAsyncCodec$Processor")
trait UserServiceAsync extends com.isuwang.dapeng.core.definition.AsyncService {

  /**
    *
    **/

  @throws[com.isuwang.dapeng.core.SoaException]
  def createUser(
                  user: com.isuwang.soa.user.scala.domain.User, timeout: Long): Future[Unit]


  /**
    *
    **/

  @throws[com.isuwang.dapeng.core.SoaException]
  def getUserById(
                   userId: Int, timeout: Long): Future[com.isuwang.soa.user.scala.domain.User]


}
    