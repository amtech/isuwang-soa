package com.isuwang.soa.price.scala

import com.isuwang.dapeng.core._;
import com.isuwang.org.apache.thrift._;
import java.util.ServiceLoader;
import java.util.concurrent.CompletableFuture;
import com.isuwang.soa.price.scala.PriceServiceAsyncCodec._;
import com.isuwang.soa.price.scala.service.PriceServiceAsync;
import scala.compat.java8.FutureConverters._
import scala.concurrent.duration._
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global

/**
  * Autogenerated by Dapeng-Code-Generator (1.2.2)
  *
  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
  *
  * @generated
  *
  **/
class PriceServiceAsyncClient extends PriceServiceAsync {

  val serviceName = "com.isuwang.soa.price.service.PriceService"
  val version = "1.0.0"
  val pool = {
    val serviceLoader = ServiceLoader.load(classOf[SoaConnectionPoolFactory])
    if (serviceLoader.iterator().hasNext) {
      val poolImpl = serviceLoader.iterator().next().getPool
      poolImpl.registerClientInfo(serviceName, version)
      poolImpl
    } else null
  }

  def getServiceMetadata: String = {
    pool.send(
      serviceName,
      version,
      "getServiceMetadata",
      new getServiceMetadata_args,
      new GetServiceMetadata_argsSerializer,
      new GetServiceMetadata_resultSerializer
    ).success
  }


  /**
    *
    **/
  def insertPrice(price: com.isuwang.soa.price.scala.domain.Price
                  , timeout: Long = 5000): Future[Unit] = {

    val response = pool.sendAsync(
      serviceName,
      version,
      "insertPrice",
      insertPrice_args(price),
      new InsertPrice_argsSerializer(),
      new InsertPrice_resultSerializer()
      , timeout).asInstanceOf[CompletableFuture[insertPrice_result]]

    toScala(response).map(null)

  }


  /**
    *
    **/
  def getPrices(
                 timeout: Long = 5000): Future[List[com.isuwang.soa.price.scala.domain.Price]] = {

    val response = pool.sendAsync(
      serviceName,
      version,
      "getPrices",
      getPrices_args(),
      new GetPrices_argsSerializer(),
      new GetPrices_resultSerializer()
      , timeout).asInstanceOf[CompletableFuture[getPrices_result]]

    toScala(response).map(_.success)

  }


}
      